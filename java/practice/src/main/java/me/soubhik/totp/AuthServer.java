package me.soubhik.totp;

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.Headers;
import me.soubhik.UndertowApp;
import org.json.simple.JSONObject;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by soubhik on 04-10-2016.
 */
public class AuthServer {
    public static class TotpHandler implements HttpHandler, UndertowApp.Helpful {
        private static final String USER_ID_PARAM = "user";
        private static final String OTP_PARAM = "otp";
        private static final String AUTH_STATUS = "authentication";

        private final JSONObject helpObject;
        private final JSONObject invalidUserId;
        private final JSONObject invalidOtp;
        private final SecureStorage secretsStore;
        private final AuthListener authListener;

        public TotpHandler(SecureStorage secretsStore, AuthListener authListener) {
            JSONObject options = new JSONObject();
            options.put(USER_ID_PARAM, "user id");
            options.put(OTP_PARAM, "a recent OTP generated by totp algorithm (an integer)");

            helpObject = new JSONObject();
            helpObject.put("parameters", options);
            helpObject.put("description", "validates OTP of a user");

            invalidUserId = new JSONObject();
            invalidUserId.put("error", "Invalid user id");
            invalidUserId.put("help", helpObject);

            invalidOtp = new JSONObject();
            invalidOtp.put("error", "Invalid OTP (should be an integer)");
            invalidOtp.put("help", helpObject);

            this.secretsStore = secretsStore;
            this.authListener = authListener;
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) {
            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");

            Map<String, Deque<String>> queryParameters = exchange.getQueryParameters();
            String user = UndertowApp.getSingleValuedParam(queryParameters, USER_ID_PARAM);
            String otp = UndertowApp.getSingleValuedParam(queryParameters, OTP_PARAM);

            if ((user == null) || (otp == null)) {
                exchange.setStatusCode(400);
                exchange.getResponseSender().send(help().toJSONString());
                return;
            }

            int otpInt;
            try {
                otpInt = Integer.parseInt(otp);
            } catch (NumberFormatException e) {
                exchange.setStatusCode(400);
                exchange.getResponseSender().send(invalidOtp.toJSONString());
                return;
            }

            String secret = secretsStore.getSecret(user);
            if (secret == null) {
                exchange.setStatusCode(400);
                exchange.getResponseSender().send(invalidUserId.toJSONString());
                return;
            }

            Totp totp;
            try {
                totp = new Totp(secret);
            } catch (NoSuchAlgorithmException|InvalidKeyException e) {
                exchange.setStatusCode(500);
                exchange.getResponseSender().send("Internal server error");
                return;
            }

            String status = (otpInt == totp.currentCode()) ? "success" :
                            ((otpInt == totp.pastCode(1)) ? "success" :
                            ((otpInt == totp.futureCode(1)) ? "success" : "failure"));

            if ("success".equals(status)) {
                AuthStatus authStatus = new AuthStatus(user, System.currentTimeMillis());
                authListener.notify(authStatus);
            }

            JSONObject response = new JSONObject();
            response.put(USER_ID_PARAM, user);
            response.put(OTP_PARAM, otp);
            response.put(AUTH_STATUS, status);
            exchange.getResponseSender().send(response.toJSONString());
        }

        @Override
        public JSONObject help() {
            return helpObject;
        }
    }

    public static void main(String[] args) {
        Map<String, HttpHandler> pathToHandler = new HashMap<String, HttpHandler>();
        TotpHandler totpHandler = new TotpHandler(new DummySecretsStore(), new StdoutAuthListener());
        pathToHandler.put("totp", totpHandler);
        UndertowApp.HelpHandler helpHandler = new UndertowApp.HelpHandler(pathToHandler);
        pathToHandler.put("/help", helpHandler);
        UndertowApp myApp = new UndertowApp(pathToHandler);
        myApp.start();
        try {
            while (true) {
                Thread.sleep(3600000);
            }
        } catch (InterruptedException e) {
            myApp.stop(500);
        }
    }
}
